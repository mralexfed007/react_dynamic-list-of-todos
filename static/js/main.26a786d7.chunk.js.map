{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","todos","onSelected","className","map","todo","key","id","completed","type","readOnly","checked","title","classNames","onClick","userId","defaultProps","request","url","fullUrl","fetch","then","response","ok","Error","status","statusText","json","user","data","getUser","getTodos","CurrentUser","onClear","useState","setUser","useMemo","a","curentUser","name","email","phone","App","state","selectedUserId","selectedOption","randomOption","handleChange","e","target","value","setState","updateTodos","selectUserId","prepareTodos","filteredTodos","filter","includes","sort","Math","random","this","renderedTodos","placeholder","onChange","selected","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.26a786d7.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nexport const TodoList = ({ todos, onSelected }) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={!todo.completed\n              ? 'TodoList__item TodoList__item--unchecked'\n              : 'TodoList__item TodoList__item--checked'\n            }\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                readOnly\n                checked={todo.completed}\n              />\n              <p>{todo.title}</p>\n            </label>\n            <button\n              className={classNames('TodoList__user-button', 'button', {\n                'TodoList__user-button--selected': todo.completed,\n              })}\n              type=\"button\"\n              onClick={() => {\n                onSelected(todo.userId);\n              }}\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      userId: PropTypes.number,\n      completed: PropTypes.bool,\n      title: PropTypes.string,\n    }),\n  ),\n  onSelected: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","const API_URL = 'https://mate-api.herokuapp.com/';\n\nconst request = (url) => {\n  const fullUrl = `${API_URL}${url}`;\n\n  return fetch(fullUrl).then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n    .then(user => user.data);\n};\n\nexport const getUser = (id) => {\n  const url = `users/${id}`;\n\n  return request(url);\n};\n\nexport const getTodos = () => request('todos');\n","import React, { useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\nexport const CurrentUser = ({ userId, onClear, onSelected }) => {\n  const [user, setUser] = useState(0);\n\n  useMemo(async() => {\n    const curentUser = await getUser(userId);\n\n    if (!curentUser) {\n      onSelected(0);\n    } else {\n      setUser(curentUser);\n    }\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:&nbsp;\n          {user.id}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n      <button\n        type=\"submit\"\n        onClick={() => onClear(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onClear: PropTypes.func.isRequired,\n  onSelected: PropTypes.func.isRequired,\n};\n","/* eslint-disable no-unreachable */\nimport React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport classNames from 'classnames';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    title: '',\n    selectedOption: '',\n    randomOption: false,\n  };\n\n  componentDidMount() {\n    this.updateTodos();\n  }\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n\n    this.setState({ [name]: value });\n  }\n\n  updateTodos = async() => {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  selectUserId = (id) => {\n    this.setState({ selectedUserId: id });\n  }\n\n  prepareTodos = () => {\n    let filteredTodos = this.state.todos.filter((todo) => {\n      if (todo.title === null) {\n        return false;\n      }\n\n      if (todo.title.includes(this.state.title)) {\n        switch (this.state.selectedOption) {\n          case 'active':\n            return !todo.completed;\n\n            break;\n          case 'completed':\n            return todo.completed;\n\n            break;\n          default:\n            return true;\n        }\n      } else {\n        return false;\n      }\n    });\n\n    filteredTodos = (this.state.randomOption)\n      ? filteredTodos.sort(() => Math.random() - 0.5)\n      : filteredTodos;\n\n    return filteredTodos;\n  }\n\n  render() {\n    const { selectedUserId, title, selectedOption, randomOption }\n      = this.state;\n    const renderedTodos = this.prepareTodos();\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <div className=\"filter\">\n            <input\n              className=\"filter-item\"\n              type=\"text\"\n              name=\"title\"\n              placeholder=\"Title\"\n              value={title}\n              onChange={this.handleChange}\n            />\n            <select\n              className=\"filter-item\"\n              name=\"selectedOption\"\n              value={selectedOption}\n              onChange={this.handleChange}\n            >\n              <option\n                selected\n                value=\"all\"\n              >\n                All\n              </option>\n              <option\n                value=\"active\"\n              >\n                Active\n              </option>\n              <option\n                value=\"completed\"\n              >\n                Comleted\n              </option>\n            </select>\n            <button\n              className={classNames('filter-item', 'button', {\n                'TodoList__user-button--selected': randomOption,\n              })}\n              type=\"submit\"\n              onClick={() => this.setState({ randomOption: !randomOption })}\n            >\n              {randomOption ? 'Standart order' : 'Random order'}\n            </button>\n          </div>\n          <TodoList\n            todos={renderedTodos}\n            onSelected={this.selectUserId}\n            selectedOption={selectedOption}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onClear={this.selectUserId}\n                onSelected={this.selectUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}