{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","todos","onSelected","selectOption","optionalArray","filter","item","completed","className","map","todo","key","id","type","readOnly","checked","title","classNames","onClick","userId","defaultProps","request","url","fullUrl","fetch","then","response","ok","Error","status","statusText","json","user","data","getUser","getTodos","CurrentUser","onClear","useState","setUser","useMemo","a","curentUser","name","email","phone","App","state","copiedTodos","selectedUserId","randomOption","handleChange","e","target","value","setState","updateTodos","selectUserId","this","prevProps","prevState","titleParse","randomOrder","newArr","sort","Math","random","newTodos","includes","placeholder","onChange","selected","React","Component","ReactDOM","render","document","getElementById"],"mappings":"uZAMaA,G,MAAW,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aACtCC,EAAgBH,EAAMI,QAAO,SAACC,GAClC,OAAQH,GACN,IAAK,SACH,OAAQG,EAAKC,UAGf,IAAK,YACH,OAAOD,EAAKC,UAGd,QACE,OAAO,MAIb,OACE,yBAAKC,UAAU,YACb,sCAEA,yBAAKA,UAAU,4BACb,wBAAIA,UAAU,kBACXJ,EAAcK,KAAI,SAAAC,GAAI,OACrB,wBACEC,IAAKD,EAAKE,GACVJ,UAAYE,EAAKH,UAEb,yCADA,4CAIJ,+BACE,2BACEM,KAAK,WACLC,UAAQ,EACRC,QAASL,EAAKH,YAEhB,2BAAIG,EAAKM,QAEX,4BACER,UAAWS,IAAW,wBAAyB,SAAU,CACvD,kCAAmCP,EAAKH,YAE1CM,KAAK,SACLK,QAAS,WACPhB,EAAWQ,EAAKS,UANpB,YAUGT,EAAKS,iBAuBtBnB,EAASoB,aAAe,CACtBnB,MAAO,I,YC5EHoB,G,MAAU,SAACC,GACf,IAAMC,EAAO,UAHC,mCAGD,OAAgBD,GAE7B,OAAOE,MAAMD,GAASE,MAAK,SAACC,GAC1B,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAGnD,OAAOJ,EAASK,UAEfN,MAAK,SAAAO,GAAI,OAAIA,EAAKC,UAGVC,EAAU,SAACtB,GACtB,IAAMU,EAAG,gBAAYV,GAErB,OAAOS,EAAQC,IAGJa,EAAW,kBAAMd,EAAQ,UChBzBe,EAAc,SAAC,GAAqC,IAAnCjB,EAAkC,EAAlCA,OAAQkB,EAA0B,EAA1BA,QAASnC,EAAiB,EAAjBA,WAC7C,EAAwBoC,mBAAS,GAAjC,mBAAON,EAAP,KAAaO,EAAb,KAYA,OAVAC,kBAAO,sBAAC,4BAAAC,EAAA,sEACmBP,EAAQf,GAD3B,QACAuB,EADA,QAMJH,EAAQG,GAFRxC,EAAW,GAJP,2CAQL,CAACiB,IAGF,yBAAKX,UAAU,eACb,wBAAIA,UAAU,sBACZ,mDAEGwB,EAAKpB,KAIV,wBAAIJ,UAAU,qBAAqBwB,EAAKW,MACxC,uBAAGnC,UAAU,sBAAsBwB,EAAKY,OACxC,uBAAGpC,UAAU,sBAAsBwB,EAAKa,OACxC,4BACEhC,KAAK,SACLK,QAAS,kBAAMmB,EAAQ,KAFzB,WCoHSS,E,4MAxIbC,MAAQ,CACN9C,MAAO,GACP+C,YAAa,GACbC,eAAgB,EAChBjC,MAAO,GACPb,aAAc,GACd+C,cAAc,G,EAiBhBC,aAAe,SAACC,GACd,MAAwBA,EAAEC,OAAlBV,EAAR,EAAQA,KAAMW,EAAd,EAAcA,MAEd,EAAKC,SAAL,eAAiBZ,EAAOW,K,EAG1BE,Y,sBAAc,4BAAAf,EAAA,sEACQN,IADR,OACNlC,EADM,OAGZ,EAAKsD,SAAS,CACZtD,QACA+C,YAAY,YAAK/C,KALP,2C,EASdwD,aAAe,SAAC7C,GACd,EAAK2C,SAAS,CAAEN,eAAgBrC,K,uDA9BlC,WACE8C,KAAKF,gB,gCAGP,SAAmBG,EAAWC,GACxBA,EAAU5C,QAAU0C,KAAKX,MAAM/B,OACjC0C,KAAKG,aAGHD,EAAUV,eAAiBQ,KAAKX,MAAMG,cACxCQ,KAAKI,gB,yBAuBT,WACE,IAAMC,EAAUL,KAAKX,MAAMG,aACvBQ,KAAKX,MAAMC,YAAYgB,MAAK,kBAAMC,KAAKC,SAAW,MAClDR,KAAKG,aAETH,KAAKH,SAAS,CAAEP,YAAae,M,wBAG/B,WAAc,IAAD,OACLI,EAAWT,KAAKX,MAAM9C,MAAMI,QAAO,SAACK,GACxC,OAAmB,OAAfA,EAAKM,OAIFN,EAAKM,MAAMoD,SAAS,EAAKrB,MAAM/B,UAKxC,OAFA0C,KAAKH,SAAS,CAAEP,YAAamB,IAEtBA,I,oBAGT,WAAU,IAAD,OACP,EACIT,KAAKX,MADDE,EAAR,EAAQA,eAAgBjC,EAAxB,EAAwBA,MAAOgC,EAA/B,EAA+BA,YAAa7C,EAA5C,EAA4CA,aAAc+C,EAA1D,EAA0DA,aAG1D,OACE,yBAAK1C,UAAU,OACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,UACb,2BACEA,UAAU,cACVK,KAAK,OACL8B,KAAK,QACL0B,YAAY,QACZf,MAAOtC,EACPsD,SAAUZ,KAAKP,eAEjB,4BACE3C,UAAU,cACVmC,KAAK,eACLW,MAAOnD,EACPmE,SAAUZ,KAAKP,cAEf,4BACEoB,UAAQ,EACRjB,MAAM,OAFR,OAMA,4BACEA,MAAM,UADR,UAKA,4BACEA,MAAM,aADR,aAMF,4BACE9C,UAAWS,IAAW,cAAe,SAAU,CAC7C,kCAAmCiC,IAErCrC,KAAK,SACLK,QAAS,kBAAM,EAAKqC,SAAS,CAAEL,cAAeA,MAE7CA,EAAe,iBAAmB,iBAGvC,kBAAC,EAAD,CACEjD,MAAO+C,EACP9C,WAAYwD,KAAKD,aACjBtD,aAAcA,KAIlB,yBAAKK,UAAU,gBACb,yBAAKA,UAAU,0BACZyC,EACC,kBAAC,EAAD,CACE9B,OAAQ8B,EACRZ,QAASqB,KAAKD,aACdvD,WAAYwD,KAAKD,eAEjB,0B,GAjIEe,IAAMC,WCLxBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.ff8af07c.chunk.js","sourcesContent":["/* eslint-disable no-unreachable */\nimport React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nexport const TodoList = ({ todos, onSelected, selectOption }) => {\n  const optionalArray = todos.filter((item) => {\n    switch (selectOption) {\n      case 'active':\n        return !item.completed;\n\n        break;\n      case 'completed':\n        return item.completed;\n\n        break;\n      default:\n        return true;\n    }\n  });\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {optionalArray.map(todo => (\n            <li\n              key={todo.id}\n              className={!todo.completed\n                ? 'TodoList__item TodoList__item--unchecked'\n                : 'TodoList__item TodoList__item--checked'\n              }\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n              <button\n                className={classNames('TodoList__user-button', 'button', {\n                  'TodoList__user-button--selected': todo.completed,\n                })}\n                type=\"button\"\n                onClick={() => {\n                  onSelected(todo.userId);\n                }}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      userId: PropTypes.number,\n      completed: PropTypes.bool,\n      title: PropTypes.string,\n    }),\n  ),\n  onSelected: PropTypes.func.isRequired,\n  selectOption: PropTypes.string.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","const API_URL = 'https://mate-api.herokuapp.com/';\n\nconst request = (url) => {\n  const fullUrl = `${API_URL}${url}`;\n\n  return fetch(fullUrl).then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n    .then(user => user.data);\n};\n\nexport const getUser = (id) => {\n  const url = `users/${id}`;\n\n  return request(url);\n};\n\nexport const getTodos = () => request('todos');\n","import React, { useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\nexport const CurrentUser = ({ userId, onClear, onSelected }) => {\n  const [user, setUser] = useState(0);\n\n  useMemo(async() => {\n    const curentUser = await getUser(userId);\n\n    if (!curentUser) {\n      onSelected(0);\n    } else {\n      setUser(curentUser);\n    }\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:&nbsp;\n          {user.id}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n      <button\n        type=\"submit\"\n        onClick={() => onClear(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onClear: PropTypes.func.isRequired,\n  onSelected: PropTypes.func.isRequired,\n};\n","/* eslint-disable react/no-access-state-in-setstate */\nimport React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport classNames from 'classnames';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    copiedTodos: [],\n    selectedUserId: 0,\n    title: '',\n    selectOption: '',\n    randomOption: false,\n  };\n\n  componentDidMount() {\n    this.updateTodos();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.title !== this.state.title) {\n      this.titleParse();\n    }\n\n    if (prevState.randomOption !== this.state.randomOption) {\n      this.randomOrder();\n    }\n  }\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n\n    this.setState({ [name]: value });\n  }\n\n  updateTodos = async() => {\n    const todos = await getTodos();\n\n    this.setState({\n      todos,\n      copiedTodos: [...todos],\n    });\n  }\n\n  selectUserId = (id) => {\n    this.setState({ selectedUserId: id });\n  }\n\n  randomOrder() {\n    const newArr = (this.state.randomOption)\n      ? this.state.copiedTodos.sort(() => Math.random() - 0.5)\n      : this.titleParse();\n\n    this.setState({ copiedTodos: newArr });\n  }\n\n  titleParse() {\n    const newTodos = this.state.todos.filter((todo) => {\n      if (todo.title === null) {\n        return false;\n      }\n\n      return todo.title.includes(this.state.title);\n    });\n\n    this.setState({ copiedTodos: newTodos });\n\n    return newTodos;\n  }\n\n  render() {\n    const { selectedUserId, title, copiedTodos, selectOption, randomOption }\n      = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <div className=\"filter\">\n            <input\n              className=\"filter-item\"\n              type=\"text\"\n              name=\"title\"\n              placeholder=\"Title\"\n              value={title}\n              onChange={this.handleChange}\n            />\n            <select\n              className=\"filter-item\"\n              name=\"selectOption\"\n              value={selectOption}\n              onChange={this.handleChange}\n            >\n              <option\n                selected\n                value=\"all\"\n              >\n                All\n              </option>\n              <option\n                value=\"active\"\n              >\n                Active\n              </option>\n              <option\n                value=\"completed\"\n              >\n                Comleted\n              </option>\n            </select>\n            <button\n              className={classNames('filter-item', 'button', {\n                'TodoList__user-button--selected': randomOption,\n              })}\n              type=\"submit\"\n              onClick={() => this.setState({ randomOption: !randomOption })}\n            >\n              {randomOption ? 'Standart order' : 'Random order'}\n            </button>\n          </div>\n          <TodoList\n            todos={copiedTodos}\n            onSelected={this.selectUserId}\n            selectOption={selectOption}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onClear={this.selectUserId}\n                onSelected={this.selectUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}